#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

#import "<%= mai_class.name %>.h"

@implementation <%= mai_class.name %>

+(Class) class
{
#if TARGET_OS_IPHONE
    return [<%= mai_class.ios_name %> class];
#else
    return [<%= mai_class.mac_name %> class];
#endif
}

+ (instancetype)allocWithZone:(struct _NSZone *)zone
{
#if TARGET_OS_IPHONE
    return (<%= mai_class.name %>*) [<%= mai_class.ios_name %> alloc];
#else
    return (<%= mai_class.name %>*) [<%= mai_class.mac_name %> alloc];
#endif
}
<% for method in mai_class.methods.values %>
<% if method.is_convenience_constructor(mai_class.name) %>
<%= method.to_s %>
{
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wenum-conversion"
#if TARGET_OS_IPHONE
    return (id) [<%= mai_class.ios_name %><%= method.method_call %>];
#else
    return (id) [<%= mai_class.mac_name %><%= method.method_call %>];
#endif
#pragma clang diagnostic pop
}
<% end %>
<% end %>

#if TARGET_OS_IPHONE
-(<%= mai_class.ios_name %>*) ios
{
    return (<%= mai_class.ios_name %>*) self;
}
#else
-(<%= mai_class.mac_name %>*) mac
{
    return (<%= mai_class.mac_name %>*) self;
}
#endif

@end

#if TARGET_OS_IPHONE
@implementation <%= mai_class.ios_name %> (MAIConversion)
#else
@implementation <%= mai_class.mac_name %> (MAIConversion)
#endif
-(<%= mai_class_name %>*) mai
{
    return (<%= mai_class.name %>*) self;
}
@end

#pragma clang diagnostic pop
